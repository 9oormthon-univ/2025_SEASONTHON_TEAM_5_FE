// src/utils/storeManager.js
import AsyncStorage from "@react-native-async-storage/async-storage";
import { useExpenseStore } from "../features/main/store/expenseStore";
import { useBudgetStore } from "../features/budget/store/budgetStore";
import { useIngredientsStore } from "../features/recipe/store/ingredientsStore";

/**
 * Î™®Îì† Ïä§ÌÜ†Ïñ¥Î•º Ï¥àÍ∏∞ÌôîÌïòÎäî Ìï®Ïàò
 * - expenseStore: ÏßÄÏ∂ú ÎÇ¥Ïó≠Í≥º ÏòàÏÇ∞ Ï¥àÍ∏∞Ìôî
 * - budgetStore: ÏòàÏÇ∞ ÏÑ§Ï†ï Ï¥àÍ∏∞Ìôî
 * - ingredientsStore: Ïû¨Î£å Î™©Î°ù Ï¥àÍ∏∞Ìôî
 * - AsyncStorage: Î™®Îì† Ï†ÄÏû•Îêú Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú
 */
export const clearAllStores = async () => {
  try {
    console.log("üßπ [STORE] Starting complete store reset...");

    // 1. Í∞Å Ïä§ÌÜ†Ïñ¥Ïùò clearAll Ìï®Ïàò Ìò∏Ï∂ú
    useExpenseStore.getState().clearAll();
    useBudgetStore.getState().clearAll();
    useIngredientsStore.getState().clearAll();

    // 2. AsyncStorageÏóêÏÑú Î™®Îì† Ïï± Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú
    const keys = await AsyncStorage.getAllKeys();
    const appKeys = keys.filter(key => 
      key.includes("what_to_eat_today") || 
      key.includes("ingredients_store") ||
      key.includes("budget_store") ||
      key.includes("auth/") ||
      key.includes("debug/")
    );

    if (appKeys.length > 0) {
      await AsyncStorage.multiRemove(appKeys);
      console.log("üßπ [STORE] Removed AsyncStorage keys:", appKeys);
    }

    console.log("‚úÖ [STORE] All stores and cache cleared successfully");
    return { success: true, message: "Î™®Îì† Îç∞Ïù¥ÌÑ∞Í∞Ä Ï¥àÍ∏∞ÌôîÎêòÏóàÏäµÎãàÎã§." };
  } catch (error) {
    console.error("‚ùå [STORE] Failed to clear stores:", error);
    return { success: false, message: "Ï¥àÍ∏∞Ìôî Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§." };
  }
};

/**
 * ÌäπÏ†ï Ïä§ÌÜ†Ïñ¥Îßå Ï¥àÍ∏∞ÌôîÌïòÎäî Ìï®ÏàòÎì§
 */
export const clearExpenseStore = () => {
  useExpenseStore.getState().clearAll();
  console.log("üßπ [STORE] Expense store cleared");
};

export const clearBudgetStore = () => {
  useBudgetStore.getState().clearAll();
  console.log("üßπ [STORE] Budget store cleared");
};

export const clearIngredientsStore = () => {
  useIngredientsStore.getState().clearAll();
  console.log("üßπ [STORE] Ingredients store cleared");
};

/**
 * AsyncStorageÎßå Ï¥àÍ∏∞ÌôîÌïòÎäî Ìï®Ïàò
 */
export const clearAsyncStorage = async () => {
  try {
    const keys = await AsyncStorage.getAllKeys();
    const appKeys = keys.filter(key => 
      key.includes("what_to_eat_today") || 
      key.includes("ingredients_store") ||
      key.includes("budget_store") ||
      key.includes("auth/") ||
      key.includes("debug/")
    );

    if (appKeys.length > 0) {
      await AsyncStorage.multiRemove(appKeys);
      console.log("üßπ [STORE] AsyncStorage cleared:", appKeys);
    }
    return { success: true };
  } catch (error) {
    console.error("‚ùå [STORE] Failed to clear AsyncStorage:", error);
    return { success: false };
  }
};
